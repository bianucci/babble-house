package com.ffh.babblehouse.view;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.navigator.Navigator;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.Tree;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class MainUI extends CustomComponent implements View{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout BodyVerticalLayout;
	@AutoGenerated
	private TabSheet MainPageTab;
	@AutoGenerated
	private VerticalLayout UserDefinedRulesTab;
	@AutoGenerated
	private HorizontalLayout ContentHorizontalLayout;
	@AutoGenerated
	private Table UDRTable;
	@AutoGenerated
	private HorizontalLayout OptionsHorizontalLayout;
	@AutoGenerated
	private Button AddRuleButton;
	@AutoGenerated
	private Button RemoveRuleButton;
	@AutoGenerated
	private HorizontalLayout MainPageTabHorizontalLayout;
	@AutoGenerated
	private Panel GeneralInformationPanel;
	@AutoGenerated
	private VerticalLayout GeneralInformationVerticalLayout;
	@AutoGenerated
	private Button button_2;
	@AutoGenerated
	private Panel ServiceGroupsPanel;
	@AutoGenerated
	private VerticalLayout verticalLayout_3;
	@AutoGenerated
	private Tree ServiceGroupTree;
	@AutoGenerated
	private HorizontalLayout HeaderHorizontalLayout;
	@AutoGenerated
	private Button LogOffButton;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	Navigator navigator;
	
	public MainUI(Navigator navigator) {
		this.navigator = navigator;
	}

	@Override
	public void enter(ViewChangeEvent event) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		UDRTable.setSelectable(true);
		
		MainPageTab.getTab(MainPageTabHorizontalLayout)			.setIcon(new ThemeResource("img/BlackHouse.ico"));
		MainPageTab.getTab(UserDefinedRulesTab)					.setIcon(new ThemeResource("img/gear.ico"));
		LogOffButton											.setIcon(new ThemeResource("img/logoff_.ico"));
		
		//TODO this call will be removed
		generateTree();
		//TODO this call will be removed
		generateTable();
	}

	//TODO this method will be removed
	private void generateTree(){
	        
			// Create the tree nodes
			ServiceGroupTree.addItem("Controller 1");
			ServiceGroupTree.addItem("Sensors 1");
			ServiceGroupTree.addItem("Devices 1");
			ServiceGroupTree.addItem("Sensor 11");
			ServiceGroupTree.addItem("Sensor 12");
			ServiceGroupTree.addItem("Sensor 13");
			ServiceGroupTree.addItem("Device 11");
			ServiceGroupTree.addItem("Device 12");
			ServiceGroupTree.addItem("Device 13");
			
			ServiceGroupTree.addItem("Controller 2");
			ServiceGroupTree.addItem("Sensors 2");
			ServiceGroupTree.addItem("Devices 2");
			ServiceGroupTree.addItem("Sensor 21");
			ServiceGroupTree.addItem("Sensor 22");
			ServiceGroupTree.addItem("Sensor 23");
			ServiceGroupTree.addItem("Device 21");
			ServiceGroupTree.addItem("Device 22");
			ServiceGroupTree.addItem("Device 23");
			
			ServiceGroupTree.addItem("Controller 3");
			ServiceGroupTree.addItem("Sensors 3");
			ServiceGroupTree.addItem("Devices 3");
			ServiceGroupTree.addItem("Sensor 31");
			ServiceGroupTree.addItem("Sensor 32");
			ServiceGroupTree.addItem("Sensor 33");
			ServiceGroupTree.addItem("Device 31");
			ServiceGroupTree.addItem("Device 32");
			ServiceGroupTree.addItem("Device 33");
			
			// Set the hierarchy
			ServiceGroupTree.setParent("Sensors 1", "Controller 1");
			ServiceGroupTree.setParent("Devices 1", "Controller 1");
			ServiceGroupTree.setParent("Sensor 11", "Sensors 1");
			ServiceGroupTree.setParent("Sensor 12", "Sensors 1");
			ServiceGroupTree.setParent("Sensor 13", "Sensors 1");
			ServiceGroupTree.setParent("Device 11", "Devices 1");
			ServiceGroupTree.setParent("Device 12", "Devices 1");
			ServiceGroupTree.setParent("Device 13", "Devices 1");
			
			ServiceGroupTree.setParent("Sensors 2", "Controller 2");
			ServiceGroupTree.setParent("Devices 2", "Controller 2");
			ServiceGroupTree.setParent("Sensor 21", "Sensors 2");
			ServiceGroupTree.setParent("Sensor 22", "Sensors 2");
			ServiceGroupTree.setParent("Sensor 23", "Sensors 2");
			ServiceGroupTree.setParent("Device 21", "Devices 2");
			ServiceGroupTree.setParent("Device 22", "Devices 2");
			ServiceGroupTree.setParent("Device 23", "Devices 2");

			ServiceGroupTree.setParent("Sensors 3", "Controller 3");
			ServiceGroupTree.setParent("Devices 3", "Controller 3");
			ServiceGroupTree.setParent("Sensor 31", "Sensors 3");
			ServiceGroupTree.setParent("Sensor 32", "Sensors 3");
			ServiceGroupTree.setParent("Sensor 33", "Sensors 3");
			ServiceGroupTree.setParent("Device 31", "Devices 3");
			ServiceGroupTree.setParent("Device 32", "Devices 3");
			ServiceGroupTree.setParent("Device 33", "Devices 3");
			
			// Disallow children for leaves
			ServiceGroupTree.setChildrenAllowed("Device 11", false);
			ServiceGroupTree.setChildrenAllowed("Device 12", false);
			ServiceGroupTree.setChildrenAllowed("Device 13", false);
			ServiceGroupTree.setChildrenAllowed("Sensor 11", false);
			ServiceGroupTree.setChildrenAllowed("Sensor 12", false);
			ServiceGroupTree.setChildrenAllowed("Sensor 13", false);
			
			ServiceGroupTree.setChildrenAllowed("Device 21", false);
			ServiceGroupTree.setChildrenAllowed("Device 22", false);
			ServiceGroupTree.setChildrenAllowed("Device 23", false);
			ServiceGroupTree.setChildrenAllowed("Sensor 21", false);
			ServiceGroupTree.setChildrenAllowed("Sensor 22", false);
			ServiceGroupTree.setChildrenAllowed("Sensor 23", false);

			ServiceGroupTree.setChildrenAllowed("Device 31", false);
			ServiceGroupTree.setChildrenAllowed("Device 32", false);
			ServiceGroupTree.setChildrenAllowed("Device 33", false);
			ServiceGroupTree.setChildrenAllowed("Sensor 31", false);
			ServiceGroupTree.setChildrenAllowed("Sensor 32", false);
			ServiceGroupTree.setChildrenAllowed("Sensor 33", false);
			
		}

		/*
		final Object[][] planets = new Object[][]{
		        new Object[]{"Mercury"}, 
		        new Object[]{"Venus"},
		        new Object[]{"Earth", "The Moon"},    
		        new Object[]{"Mars", "Phobos", "Deimos"},
		        new Object[]{"Jupiter", "Io", "Europa", "Ganymedes",
		                                "Callisto"},
		        new Object[]{"Saturn",  "Titan", "Tethys", "Dione",
		                                "Rhea", "Iapetus"},
		        new Object[]{"Uranus",  "Miranda", "Ariel", "Umbriel",
		                                "Titania", "Oberon"},
		        new Object[]{"Neptune", "Triton", "Proteus", "Nereid",
		                                "Larissa"}};
		
		/* Add planets as root items in the tree. */
		/*for (int i=0; i<planets.length; i++) {
		    String planet = (String) (planets[i][0]);
		    ServiceGroupTree.addItem(planet);
		    
		    if (planets[i].length == 1) {
		        // The planet has no moons so make it a leaf.
		    	ServiceGroupTree.setChildrenAllowed(planet, false);
		    } else {
		        // Add children (moons) under the planets.
		        for (int j=1; j<planets[i].length; j++) {
		            String moon = (String) planets[i][j];
		            
		            // Add the item as a regular item.
		            ServiceGroupTree.addItem(moon);
		            
		            // Set it to be a child.
		            ServiceGroupTree.setParent(moon, planet);
		            
		            // Make the moons look like leaves.
		            ServiceGroupTree.setChildrenAllowed(moon, false);
		        }

		        // Expand the subtree.
		        ServiceGroupTree.expandItemsRecursively(planet);
		    }
		}
		
	}
*/
	
	
	//TODO this method will be removed
	private void generateTable(){
		
		UDRTable.addContainerProperty("Id", String.class, null);
		UDRTable.addContainerProperty("Sensor",  String.class, null);
		UDRTable.addContainerProperty("Actuator",  String.class, null);
		UDRTable.addContainerProperty("Status",  String.class, null);
		        
		// Add a few other rows using shorthand addItem()
		UDRTable.addItem(new Object[]{"12", "2" , "4", "true" }, 1);
		UDRTable.addItem(new Object[]{"23", "3", "5", "false"}, 2);
		UDRTable.addItem(new Object[]{"35", "4", "1", "false"}, 3);
		
		// Uncomment to set the maximum amount of elements to be show at once (adds an arrow to scroll down)
		//UDRTable.setPageLength(2);
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// HeaderHorizontalLayout
		HeaderHorizontalLayout = buildHeaderHorizontalLayout();
		mainLayout.addComponent(HeaderHorizontalLayout);
		mainLayout.setComponentAlignment(HeaderHorizontalLayout, new Alignment(
				20));
		
		// BodyVerticalLayout
		BodyVerticalLayout = buildBodyVerticalLayout();
		mainLayout.addComponent(BodyVerticalLayout);
		mainLayout.setExpandRatio(BodyVerticalLayout, 0.8f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHeaderHorizontalLayout() {
		// common part: create layout
		HeaderHorizontalLayout = new HorizontalLayout();
		HeaderHorizontalLayout.setImmediate(false);
		HeaderHorizontalLayout.setWidth("100.0%");
		HeaderHorizontalLayout.setHeight("-1px");
		HeaderHorizontalLayout.setMargin(true);
		
		// LogOffButton
		LogOffButton = new Button();
		LogOffButton.setCaption("Log off");
		LogOffButton.setImmediate(true);
		LogOffButton.setWidth("-1px");
		LogOffButton.setHeight("-1px");
		HeaderHorizontalLayout.addComponent(LogOffButton);
		HeaderHorizontalLayout.setComponentAlignment(LogOffButton,
				new Alignment(34));
		
		return HeaderHorizontalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildBodyVerticalLayout() {
		// common part: create layout
		BodyVerticalLayout = new VerticalLayout();
		BodyVerticalLayout.setImmediate(true);
		BodyVerticalLayout.setWidth("100.0%");
		BodyVerticalLayout.setHeight("100.0%");
		BodyVerticalLayout.setMargin(false);
		
		// MainPageTab
		MainPageTab = buildMainPageTab();
		BodyVerticalLayout.addComponent(MainPageTab);
		
		return BodyVerticalLayout;
	}

	@AutoGenerated
	private TabSheet buildMainPageTab() {
		// common part: create layout
		MainPageTab = new TabSheet();
		MainPageTab.setImmediate(true);
		MainPageTab.setWidth("100.0%");
		MainPageTab.setHeight("100.0%");
		
		// MainPageTabHorizontalLayout
		MainPageTabHorizontalLayout = buildMainPageTabHorizontalLayout();
		MainPageTab.addTab(MainPageTabHorizontalLayout, "Main Page", null);
		
		// UserDefinedRulesTab
		UserDefinedRulesTab = buildUserDefinedRulesTab();
		MainPageTab.addTab(UserDefinedRulesTab, "User Defined Rules", null);
		
		return MainPageTab;
	}

	@AutoGenerated
	private HorizontalLayout buildMainPageTabHorizontalLayout() {
		// common part: create layout
		MainPageTabHorizontalLayout = new HorizontalLayout();
		MainPageTabHorizontalLayout.setImmediate(false);
		MainPageTabHorizontalLayout.setWidth("100.0%");
		MainPageTabHorizontalLayout.setHeight("100.0%");
		MainPageTabHorizontalLayout.setMargin(true);
		
		// ServiceGroupsPanel
		ServiceGroupsPanel = buildServiceGroupsPanel();
		MainPageTabHorizontalLayout.addComponent(ServiceGroupsPanel);
		MainPageTabHorizontalLayout.setExpandRatio(ServiceGroupsPanel, 0.2f);
		
		// GeneralInformationPanel
		GeneralInformationPanel = buildGeneralInformationPanel();
		MainPageTabHorizontalLayout.addComponent(GeneralInformationPanel);
		MainPageTabHorizontalLayout.setExpandRatio(GeneralInformationPanel,
				0.8f);
		
		return MainPageTabHorizontalLayout;
	}

	@AutoGenerated
	private Panel buildServiceGroupsPanel() {
		// common part: create layout
		ServiceGroupsPanel = new Panel();
		ServiceGroupsPanel.setCaption("Service Groups");
		ServiceGroupsPanel.setImmediate(true);
		ServiceGroupsPanel.setWidth("100.0%");
		ServiceGroupsPanel.setHeight("100.0%");
		
		// verticalLayout_3
		verticalLayout_3 = buildVerticalLayout_3();
		ServiceGroupsPanel.setContent(verticalLayout_3);
		
		return ServiceGroupsPanel;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_3() {
		// common part: create layout
		verticalLayout_3 = new VerticalLayout();
		verticalLayout_3.setImmediate(true);
		verticalLayout_3.setWidth("-1px");
		verticalLayout_3.setHeight("100.0%");
		verticalLayout_3.setMargin(false);
		
		// ServiceGroupTree
		ServiceGroupTree = new Tree();
		ServiceGroupTree.setImmediate(true);
		ServiceGroupTree.setWidth("-1px");
		ServiceGroupTree.setHeight("100.0%");
		verticalLayout_3.addComponent(ServiceGroupTree);
		
		return verticalLayout_3;
	}

	@AutoGenerated
	private Panel buildGeneralInformationPanel() {
		// common part: create layout
		GeneralInformationPanel = new Panel();
		GeneralInformationPanel.setCaption("General information");
		GeneralInformationPanel.setImmediate(false);
		GeneralInformationPanel.setWidth("100.0%");
		GeneralInformationPanel.setHeight("100.0%");
		
		// GeneralInformationVerticalLayout
		GeneralInformationVerticalLayout = buildGeneralInformationVerticalLayout();
		GeneralInformationPanel.setContent(GeneralInformationVerticalLayout);
		
		return GeneralInformationPanel;
	}

	@AutoGenerated
	private VerticalLayout buildGeneralInformationVerticalLayout() {
		// common part: create layout
		GeneralInformationVerticalLayout = new VerticalLayout();
		GeneralInformationVerticalLayout.setImmediate(false);
		GeneralInformationVerticalLayout.setWidth("100.0%");
		GeneralInformationVerticalLayout.setHeight("100.0%");
		GeneralInformationVerticalLayout.setMargin(false);
		
		// button_2
		button_2 = new Button();
		button_2.setCaption("Button");
		button_2.setImmediate(true);
		button_2.setWidth("-1px");
		button_2.setHeight("-1px");
		GeneralInformationVerticalLayout.addComponent(button_2);
		
		return GeneralInformationVerticalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildUserDefinedRulesTab() {
		// common part: create layout
		UserDefinedRulesTab = new VerticalLayout();
		UserDefinedRulesTab.setImmediate(false);
		UserDefinedRulesTab.setWidth("100.0%");
		UserDefinedRulesTab.setHeight("100.0%");
		UserDefinedRulesTab.setMargin(true);
		
		// OptionsHorizontalLayout
		OptionsHorizontalLayout = buildOptionsHorizontalLayout();
		UserDefinedRulesTab.addComponent(OptionsHorizontalLayout);
		UserDefinedRulesTab.setComponentAlignment(OptionsHorizontalLayout,
				new Alignment(6));
		
		// ContentHorizontalLayout
		ContentHorizontalLayout = buildContentHorizontalLayout();
		UserDefinedRulesTab.addComponent(ContentHorizontalLayout);
		UserDefinedRulesTab.setExpandRatio(ContentHorizontalLayout, 0.8f);
		UserDefinedRulesTab.setComponentAlignment(ContentHorizontalLayout,
				new Alignment(48));
		
		return UserDefinedRulesTab;
	}

	@AutoGenerated
	private HorizontalLayout buildOptionsHorizontalLayout() {
		// common part: create layout
		OptionsHorizontalLayout = new HorizontalLayout();
		OptionsHorizontalLayout.setImmediate(false);
		OptionsHorizontalLayout.setWidth("-1px");
		OptionsHorizontalLayout.setHeight("-1px");
		OptionsHorizontalLayout.setMargin(false);
		OptionsHorizontalLayout.setSpacing(true);
		
		// RemoveRuleButton
		RemoveRuleButton = new Button();
		RemoveRuleButton.setCaption("Remove selected rule");
		RemoveRuleButton.setImmediate(true);
		RemoveRuleButton.setWidth("-1px");
		RemoveRuleButton.setHeight("-1px");
		OptionsHorizontalLayout.addComponent(RemoveRuleButton);
		OptionsHorizontalLayout.setComponentAlignment(RemoveRuleButton,
				new Alignment(6));
		
		// AddRuleButton
		AddRuleButton = new Button();
		AddRuleButton.setCaption("Add new rule");
		AddRuleButton.setImmediate(true);
		AddRuleButton.setWidth("-1px");
		AddRuleButton.setHeight("-1px");
		OptionsHorizontalLayout.addComponent(AddRuleButton);
		
		return OptionsHorizontalLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildContentHorizontalLayout() {
		// common part: create layout
		ContentHorizontalLayout = new HorizontalLayout();
		ContentHorizontalLayout.setImmediate(false);
		ContentHorizontalLayout.setWidth("100.0%");
		ContentHorizontalLayout.setHeight("100.0%");
		ContentHorizontalLayout.setMargin(false);
		
		// UDRTable
		UDRTable = new Table();
		UDRTable.setImmediate(false);
		UDRTable.setWidth("-1px");
		UDRTable.setHeight("-1px");
		ContentHorizontalLayout.addComponent(UDRTable);
		ContentHorizontalLayout.setComponentAlignment(UDRTable, new Alignment(
				20));
		
		return ContentHorizontalLayout;
	}
}
