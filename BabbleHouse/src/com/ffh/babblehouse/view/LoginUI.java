package com.ffh.babblehouse.view;

import com.ffh.babblehouse.controller.BusinessObjects.BoUser;
import com.ffh.babblehouse.model.DtoUser;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.Position;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class LoginUI extends CustomComponent implements View{

	//region AutoGenerated variables
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout WrapLoginTabSheetVerticalLayout;
	@AutoGenerated
	private TabSheet LoginTabSheet;
	@AutoGenerated
	private GridLayout LoginGridLayout;
	@AutoGenerated
	private Button LoginButton;
	@AutoGenerated
	private PasswordField PasswordField;
	@AutoGenerated
	private Label PasswordLabel;
	@AutoGenerated
	private TextField UsernameTextField;
	@AutoGenerated
	private Label UsernameLabel;
	//endregion AutoGenerated variables
	
	Navigator navigator;
	String MAINUI;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public LoginUI(Navigator navigator, String MAINUI){
		// Injecting the navigator
		this.navigator = navigator;
		// Injecting MAINUI name
		this.MAINUI = MAINUI;
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		LoginButton.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				login(UsernameTextField.getValue(), PasswordField.getValue());
			}
		});
	}
	
    private void login(String userName, String password) {
    	if(userName.length()<6 || userName.length() > 12 || password.length() < 6 || password.length() > 20)
    		Notification.show("Username and/or Password length is too long or too short",Type.ERROR_MESSAGE); 
    	else
    	{
        	// FIlling Dto with data from View
        	DtoUser userBeingVerified = new DtoUser();
        	userBeingVerified.setUserName(userName);
        	userBeingVerified.setPassword(password);
        	
        	// Creating a Business Object
        	BoUser boUser = new BoUser();
        	
        	// Requesting action from BO
        	try {
				if(boUser.Validate(userBeingVerified))
					navigator.navigateTo(MAINUI);
				else
					Notification.show("Could not Log in. Possibly wrong user name and/or password.",Type.ERROR_MESSAGE);
			}catch (Exception e) {
				Notification.show(e.getMessage() ,Type.ERROR_MESSAGE);
			}
    	}
    }
		
    //region Auto generated methods
	@Override
	public void enter(ViewChangeEvent event) {
		Notification welcome = new Notification("Welcome to BabbleHouse",Type.HUMANIZED_MESSAGE);
		welcome.setDelayMsec(3000);
		welcome.setPosition(Position.TOP_CENTER);
		welcome.show(this.getUI().getPage());
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// WrapLoginTabSheetVerticalLayout
		WrapLoginTabSheetVerticalLayout = buildWrapLoginTabSheetVerticalLayout();
		mainLayout.addComponent(WrapLoginTabSheetVerticalLayout);
		mainLayout.setComponentAlignment(WrapLoginTabSheetVerticalLayout,
				new Alignment(48));
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildWrapLoginTabSheetVerticalLayout() {
		// common part: create layout
		WrapLoginTabSheetVerticalLayout = new VerticalLayout();
		WrapLoginTabSheetVerticalLayout.setImmediate(false);
		WrapLoginTabSheetVerticalLayout.setWidth("-1px");
		WrapLoginTabSheetVerticalLayout.setHeight("-1px");
		WrapLoginTabSheetVerticalLayout.setMargin(false);
		
		// LoginTabSheet
		LoginTabSheet = buildLoginTabSheet();
		WrapLoginTabSheetVerticalLayout.addComponent(LoginTabSheet);
		
		return WrapLoginTabSheetVerticalLayout;
	}

	@AutoGenerated
	private TabSheet buildLoginTabSheet() {
		// common part: create layout
		LoginTabSheet = new TabSheet();
		LoginTabSheet.setImmediate(true);
		LoginTabSheet.setWidth("-1px");
		LoginTabSheet.setHeight("-1px");
		
		// LoginGridLayout
		LoginGridLayout = buildLoginGridLayout();
		LoginTabSheet.addTab(LoginGridLayout, "Credentials authentication",
				null);
		
		return LoginTabSheet;
	}

	@AutoGenerated
	private GridLayout buildLoginGridLayout() {
		// common part: create layout
		LoginGridLayout = new GridLayout();
		LoginGridLayout.setImmediate(false);
		LoginGridLayout.setWidth("100.0%");
		LoginGridLayout.setHeight("100.0%");
		LoginGridLayout.setMargin(true);
		LoginGridLayout.setSpacing(true);
		LoginGridLayout.setColumns(2);
		LoginGridLayout.setRows(4);
		
		// UsernameLabel
		UsernameLabel = new Label();
		UsernameLabel.setImmediate(false);
		UsernameLabel.setWidth("-1px");
		UsernameLabel.setHeight("18px");
		UsernameLabel.setValue("Username");
		LoginGridLayout.addComponent(UsernameLabel, 0, 0);
		LoginGridLayout.setComponentAlignment(UsernameLabel, new Alignment(48));
		
		// UsernameTextField
		UsernameTextField = new TextField();
		UsernameTextField.setImmediate(false);
		UsernameTextField.setWidth("-1px");
		UsernameTextField.setHeight("-1px");
		LoginGridLayout.addComponent(UsernameTextField, 1, 0);
		LoginGridLayout.setComponentAlignment(UsernameTextField, new Alignment(
				24));
		
		// PasswordLabel
		PasswordLabel = new Label();
		PasswordLabel.setImmediate(false);
		PasswordLabel.setWidth("-1px");
		PasswordLabel.setHeight("-1px");
		PasswordLabel.setValue("Password");
		LoginGridLayout.addComponent(PasswordLabel, 0, 2);
		LoginGridLayout.setComponentAlignment(PasswordLabel, new Alignment(48));
		
		// PasswordField
		PasswordField = new PasswordField();
		PasswordField.setImmediate(false);
		PasswordField.setWidth("-1px");
		PasswordField.setHeight("-1px");
		LoginGridLayout.addComponent(PasswordField, 1, 2);
		LoginGridLayout.setComponentAlignment(PasswordField, new Alignment(24));
		
		// LoginButton
		LoginButton = new Button();
		LoginButton.setCaption("Log in");
		LoginButton.setImmediate(true);
		LoginButton.setWidth("-1px");
		LoginButton.setHeight("-1px");
		LoginGridLayout.addComponent(LoginButton, 1, 3);
		LoginGridLayout.setComponentAlignment(LoginButton, new Alignment(34));
		
		return LoginGridLayout;
	}
	//endregion Auto generated methods

}
