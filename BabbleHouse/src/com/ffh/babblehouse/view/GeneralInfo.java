package com.ffh.babblehouse.view;

import com.ffh.babblehouse.controller.BBNodes.IBBDataBridge;
import com.ffh.babblehouse.controller.BusinessObjects.BoDevice;
import com.ffh.babblehouse.model.DtoDevice;
import com.ffh.babblehouse.model.DtoSensor;
import com.ffh.babblehouse.model.DtoServiceGroup;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.Button.ClickEvent;

@SuppressWarnings("serial")
public class GeneralInfo extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Table table_1;
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	DtoServiceGroup dtoServiceGroup;
	
	public GeneralInfo(DtoServiceGroup dtoServiceGroup){
		this.dtoServiceGroup = dtoServiceGroup; 
		
		buildMainLayout();
		fillView();
		setCompositionRoot(mainLayout);
	}
	
	private void fillView() {
		
		addTableHeaders();
				
		// The Table item identifier for the row.
		int itemId = 0; 
		for(DtoSensor dtoSensor: dtoServiceGroup.getSensors())
			table_1.addItem(new Object[] {String.valueOf(dtoSensor.getId()), dtoSensor.getSensorName(),"Unit : " + dtoSensor.getMeasuringUnit().getUnit_name(),String.valueOf(dtoSensor.getLatestValue().getValue()),null},itemId++);
	
		for(final DtoDevice dtoDevice: dtoServiceGroup.getDevices()){
			// Create a button to turn off Actuator.
			final Button buttonAction = new Button();
			
			// Check the value of an Actuator if it's on or off
			if(dtoDevice.getLatestValue().getValue() == 1 ) {
				buttonAction.setCaption("Turn off");
				turnOffEvent = getTurnOffEvent(dtoDevice, buttonAction); 
				buttonAction.addClickListener(turnOffEvent);
			}
			else if(dtoDevice.getLatestValue().getValue() == 0){
				buttonAction.setCaption("Turn on");
				turnOnEvent = getTurnOnEvent(dtoDevice, buttonAction); 
				buttonAction.addClickListener(getTurnOnEvent(dtoDevice, buttonAction));
			}

			table_1.addItem(new Object[] {String.valueOf(dtoDevice.getId()), dtoDevice.getDeviceName(),"Type : " + dtoDevice.getType().getName(),String.valueOf(dtoDevice.getLatestValue().getValue()), buttonAction},itemId++);
		}
		
		table_1.setVisible(true);
	}

	final BoDevice boDevice = new BoDevice();
	ClickListener turnOnEvent;
	ClickListener turnOffEvent; 
	
	private ClickListener getTurnOnEvent(final DtoDevice dtoDevice, final Button buttonAction) {
		return new Button.ClickListener() {
			    public void buttonClick(ClickEvent event) {
			       
			    	Notification.show("Turning on");
			    	
			    	//TODO add call to send information to actuator (Backers method)
			    	
			    	// Save change to DB
			    	boDevice.addDeviceValue(dtoDevice, 1);
			    	
			    	//TODO Change value on the table
			    	
			    	// Set new caption
			    	buttonAction.setCaption("Turn off");
			    	buttonAction.removeClickListener(turnOnEvent);
			    	buttonAction.addClickListener(getTurnOffEvent(dtoDevice, buttonAction));
			    	
			    	System.out.println(dtoDevice.getLatestValue().getValue());
			    } 
		};
	}

	private ClickListener getTurnOffEvent(final DtoDevice dtoDevice, final Button buttonAction) {
		return new Button.ClickListener() {
		    public void buttonClick(ClickEvent event) {
		    	Notification.show("Turning off");
		    				        			        	
		    	//TODO add call to send information to actuator (Backers method)
		    	
		    	// Save change to DB
		    	boDevice.addDeviceValue(dtoDevice, 0);

		    	// Change value on the table
//			        	Item item = table_1.getItem(4);
//			        	item.getItemProperty("Status").setValue(0);
		    	
		    	// Set new caption
		    	buttonAction.setCaption("Turn on");
		    	buttonAction.removeClickListener(turnOffEvent);
		    	buttonAction.addClickListener(getTurnOnEvent(dtoDevice, buttonAction));
		    	
		    	System.out.println(dtoDevice.getLatestValue().getValue());
		    } 
		};
	}

	private void addTableHeaders() {
		/* Define the names and data types of columns.
		 * The "default value" parameter is meaningless here. */
		table_1.addContainerProperty("Item id", String.class,  null);
		table_1.addContainerProperty("Item name", String.class,  null); //DtoServiceGroup/status
		table_1.addContainerProperty("Description",  String.class,  null); // DtoType -
		table_1.addContainerProperty("Status",       String.class, null); //<DtoValue> - status of actuator
		table_1.addContainerProperty("Change",       Button.class, null); // Switch on/off Button
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// table_1
		table_1 = new Table();
		table_1.setImmediate(false);
		table_1.setWidth("100.0%");
		table_1.setHeight("100.0%");
		mainLayout.addComponent(table_1,
				"top:20.0px;right:240.0px;bottom:101.0px;left:160.0px;");
		
		return mainLayout;
	}}
