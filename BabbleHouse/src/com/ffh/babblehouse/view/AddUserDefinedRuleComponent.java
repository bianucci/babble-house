package com.ffh.babblehouse.view;

import java.util.List;

import com.ffh.babblehouse.model.DtoSensor;
import com.ffh.babblehouse.model.DtoServiceGroup;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;

@SuppressWarnings("serial")
public class AddUserDefinedRuleComponent extends CustomComponent {

	//region AutoGenerated variables
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private GridLayout mainLayout;
	@AutoGenerated
	private ComboBox greaterThanMaximumComboBox;
	@AutoGenerated
	private Label greaterThanMaximumLabel;
	@AutoGenerated
	private ComboBox smallerThanMinimumComboBox;
	@AutoGenerated
	private Label smallerThanMinimumLabel;
	@AutoGenerated
	private TextField maximumValueTextField;
	@AutoGenerated
	private Label maximumValueLabel;
	@AutoGenerated
	private TextField minimumValueTextField;
	@AutoGenerated
	private Label minimumValueLabel;
	@AutoGenerated
	private ComboBox componentComboBox;
	@AutoGenerated
	private Label ComponentLabel;
	
	//endregion AutoGenerated variables
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @param serviceGroupList 
	 */
	List<DtoServiceGroup> serviceGroupList;
	
	public AddUserDefinedRuleComponent(List<DtoServiceGroup> serviceGroupList) {

		this.serviceGroupList = serviceGroupList;
		
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.setSizeUndefined();
		
		fillComboBoxes();
	}

	// TODO implement method (BOLayer)
	public void saveData() {
		
	}
	
	private void fillComboBoxes() {
		//greaterThanMaximumComboBox.setReadOnly(true);
		greaterThanMaximumComboBox.addItem("Activate");
		greaterThanMaximumComboBox.addItem("Deactivate");
		greaterThanMaximumComboBox.setValue("Activate");
		
		//smallerThanMinimumComboBox.setReadOnly(true);
		smallerThanMinimumComboBox.addItem("Activate");
		smallerThanMinimumComboBox.addItem("Deactivate");
		smallerThanMinimumComboBox.setValue("Activate");
		
		for(DtoServiceGroup dtoServiceGroup : serviceGroupList)
			for(DtoSensor dtoSensor : dtoServiceGroup.getSensors() )
				componentComboBox.addItem(dtoSensor.getSensorName());
		
	}

	@AutoGenerated
	private GridLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new GridLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		mainLayout.setColumns(2);
		mainLayout.setRows(5);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// ComponentLabel
		ComponentLabel = new Label();
		ComponentLabel.setImmediate(false);
		ComponentLabel.setWidth("-1px");
		ComponentLabel.setHeight("-1px");
		ComponentLabel.setValue("Component");
		mainLayout.addComponent(ComponentLabel, 0, 0);
		mainLayout.setComponentAlignment(ComponentLabel, new Alignment(48));
		
		// componentComboBox
		componentComboBox = new ComboBox();
		componentComboBox.setImmediate(false);
		componentComboBox.setWidth("-1px");
		componentComboBox.setHeight("-1px");
		mainLayout.addComponent(componentComboBox, 1, 0);
		mainLayout.setComponentAlignment(componentComboBox, new Alignment(33));
		
		// minimumValueLabel
		minimumValueLabel = new Label();
		minimumValueLabel.setImmediate(false);
		minimumValueLabel.setWidth("-1px");
		minimumValueLabel.setHeight("-1px");
		minimumValueLabel.setValue("Minimum Value");
		mainLayout.addComponent(minimumValueLabel, 0, 1);
		mainLayout.setComponentAlignment(minimumValueLabel, new Alignment(48));
		
		// minimumValueTextField
		minimumValueTextField = new TextField();
		minimumValueTextField.setImmediate(false);
		minimumValueTextField.setWidth("-1px");
		minimumValueTextField.setHeight("-1px");
		minimumValueTextField.setMaxLength(3);
		mainLayout.addComponent(minimumValueTextField, 1, 1);
		mainLayout.setComponentAlignment(minimumValueTextField, new Alignment(
				33));
		
		// maximumValueLabel
		maximumValueLabel = new Label();
		maximumValueLabel.setImmediate(false);
		maximumValueLabel.setWidth("-1px");
		maximumValueLabel.setHeight("-1px");
		maximumValueLabel.setValue("Maximum Value");
		mainLayout.addComponent(maximumValueLabel, 0, 2);
		mainLayout.setComponentAlignment(maximumValueLabel, new Alignment(48));
		
		// maximumValueTextField
		maximumValueTextField = new TextField();
		maximumValueTextField.setImmediate(false);
		maximumValueTextField.setWidth("-1px");
		maximumValueTextField.setHeight("-1px");
		maximumValueTextField.setMaxLength(3);
		mainLayout.addComponent(maximumValueTextField, 1, 2);
		mainLayout.setComponentAlignment(maximumValueTextField, new Alignment(
				33));
		
		// smallerThanMinimumLabel
		smallerThanMinimumLabel = new Label();
		smallerThanMinimumLabel.setImmediate(false);
		smallerThanMinimumLabel.setWidth("-1px");
		smallerThanMinimumLabel.setHeight("-1px");
		smallerThanMinimumLabel.setValue("When smaller than minimum");
		mainLayout.addComponent(smallerThanMinimumLabel, 0, 3);
		mainLayout.setComponentAlignment(smallerThanMinimumLabel,
				new Alignment(48));
		
		// smallerThanMinimumComboBox
		smallerThanMinimumComboBox = new ComboBox();
		smallerThanMinimumComboBox.setImmediate(false);
		smallerThanMinimumComboBox.setWidth("-1px");
		smallerThanMinimumComboBox.setHeight("-1px");
		mainLayout.addComponent(smallerThanMinimumComboBox, 1, 3);
		mainLayout.setComponentAlignment(smallerThanMinimumComboBox,
				new Alignment(33));
		
		// greaterThanMaximumLabel
		greaterThanMaximumLabel = new Label();
		greaterThanMaximumLabel.setImmediate(false);
		greaterThanMaximumLabel.setWidth("-1px");
		greaterThanMaximumLabel.setHeight("-1px");
		greaterThanMaximumLabel.setValue("When greater than maximum");
		mainLayout.addComponent(greaterThanMaximumLabel, 0, 4);
		mainLayout.setComponentAlignment(greaterThanMaximumLabel,
				new Alignment(48));
		
		// greaterThanMaximumComboBox
		greaterThanMaximumComboBox = new ComboBox();
		greaterThanMaximumComboBox.setImmediate(false);
		greaterThanMaximumComboBox.setWidth("-1px");
		greaterThanMaximumComboBox.setHeight("-1px");
		mainLayout.addComponent(greaterThanMaximumComboBox, 1, 4);
		mainLayout.setComponentAlignment(greaterThanMaximumComboBox,
				new Alignment(33));
		
		return mainLayout;
	}

}
